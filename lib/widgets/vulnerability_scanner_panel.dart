import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:async';
import 'dart:math';

class VulnerabilityScannerPanel extends StatefulWidget {
  const VulnerabilityScannerPanel({super.key});

  @override
  State<VulnerabilityScannerPanel> createState() => _VulnerabilityScannerPanelState();
}

class _VulnerabilityScannerPanelState extends State<VulnerabilityScannerPanel> {
  final List<Vulnerability> _vulnerabilities = [];
  Timer? _scanTimer;
  final Random _random = Random();

  final List<String> _cveIds = [
    'CVE-2024-3094',
    'CVE-2023-44487',
    'CVE-2023-38545',
    'CVE-2023-4911',
    'CVE-2023-32233',
    'CVE-2023-28252',
    'CVE-2023-23397',
    'CVE-2023-21716',
    'CVE-2022-47966',
    'CVE-2022-42475',
  ];

  final List<String> _services = [
    'Apache HTTP Server',
    'OpenSSL',
    'Microsoft Exchange',
    'VMware vCenter',
    'Fortinet FortiOS',
    'Citrix ADC',
    'Linux Kernel',
    'Windows SMB',
    'Oracle WebLogic',
    'Nginx',
  ];

  @override
  void initState() {
    super.initState();
    _startScanning();
  }

  @override
  void dispose() {
    _scanTimer?.cancel();
    super.dispose();
  }

  void _startScanning() {
    _scanTimer = Timer.periodic(const Duration(milliseconds: 1800), (timer) {
      _addVulnerability();
    });
  }

  void _addVulnerability() {
    if (_vulnerabilities.length > 15) {
      _vulnerabilities.removeAt(0);
    }

    final severity = _random.nextDouble();
    final vuln = Vulnerability(
      cveId: _cveIds[_random.nextInt(_cveIds.length)],
      service: _services[_random.nextInt(_services.length)],
      severity: severity > 0.8 ? 'CRITICAL' :
               severity > 0.6 ? 'HIGH' :
               severity > 0.4 ? 'MEDIUM' : 'LOW',
      score: (1 + _random.nextDouble() * 9).toStringAsFixed(1),
    );

    _vulnerabilities.add(vuln);
    if (mounted) setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'SCANNING TARGETS',
                style: GoogleFonts.sourceCodePro(
                  color: Colors.orange,
                  fontSize: 9,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.2),
                  border: Border.all(color: Colors.red.withOpacity(0.5)),
                  borderRadius: BorderRadius.circular(2),
                ),
                child: Text(
                  '${_vulnerabilities.where((v) => v.severity == 'CRITICAL').length} CRITICAL',
                  style: GoogleFonts.sourceCodePro(
                    color: Colors.red,
                    fontSize: 7,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.8),
                border: Border.all(color: Colors.orange.withOpacity(0.3)),
                borderRadius: BorderRadius.circular(2),
              ),
              child: ListView.builder(
                itemCount: _vulnerabilities.length,
                itemBuilder: (context, index) {
                  final vuln = _vulnerabilities[index];
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              vuln.cveId,
                              style: GoogleFonts.sourceCodePro(
                                color: Colors.cyan,
                                fontSize: 8,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Container(
                              padding: const EdgeInsets.symmetric(horizontal: 3, vertical: 1),
                              decoration: BoxDecoration(
                                color: _getSeverityColor(vuln.severity).withOpacity(0.2),
                                border: Border.all(
                                  color: _getSeverityColor(vuln.severity).withOpacity(0.6),
                                ),
                                borderRadius: BorderRadius.circular(1),
                              ),
                              child: Text(
                                vuln.severity,
                                style: GoogleFonts.sourceCodePro(
                                  color: _getSeverityColor(vuln.severity),
                                  fontSize: 6,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ],
                        ),
                        Text(
                          '${vuln.service} (CVSS: ${vuln.score})',
                          style: GoogleFonts.sourceCodePro(
                            color: Colors.green.withOpacity(0.8),
                            fontSize: 7,
                          ),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
          const SizedBox(height: 4),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'EXPLOITS AVAILABLE: ${_vulnerabilities.where((v) => v.severity == 'CRITICAL' || v.severity == 'HIGH').length}',
                style: GoogleFonts.sourceCodePro(
                  color: Colors.red,
                  fontSize: 8,
                ),
              ),
              Text(
                'TARGETS: ${_vulnerabilities.length}',
                style: GoogleFonts.sourceCodePro(
                  color: Colors.green,
                  fontSize: 8,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Color _getSeverityColor(String severity) {
    switch (severity) {
      case 'CRITICAL':
        return Colors.red;
      case 'HIGH':
        return Colors.orange;
      case 'MEDIUM':
        return Colors.yellow;
      case 'LOW':
        return Colors.green;
      default:
        return Colors.grey;
    }
  }
}

class Vulnerability {
  final String cveId;
  final String service;
  final String severity;
  final String score;

  Vulnerability({
    required this.cveId,
    required this.service,
    required this.severity,
    required this.score,
  });
}
